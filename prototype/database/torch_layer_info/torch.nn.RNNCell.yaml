api: torch.nn.RNNCell(input_size, hidden_size, bias=True, nonlinearity='tanh', device=None,
  dtype=None)
constraints:
  bias:
    default: true
    descp: If False, then the layer does not use bias weights True
    dtype: torch.bool
  hidden_size:
    descp: The number of features in the hidden state
    dtype: int
    range:
    - 1
    - 256
    shape: 1
    structure:
    - integer
  input_size:
    descp: The number of expected features in the input
    dtype: int
    range:
    - 1
    - 1
    shape: 1
    structure:
    - integer
  nonlinearity:
    default: tanh
    descp: The non-linearity to use. Can be either 'tanh' or 'relu'.
    dtype: torch.string
    enum:
    - tanh
    - relu
descp: An Elman RNN cell with tanh or ReLU non-linearity.
inputs:
  optional:
  - bias
  - nonlinearity
  required:
  - input_size
  - hidden_size
