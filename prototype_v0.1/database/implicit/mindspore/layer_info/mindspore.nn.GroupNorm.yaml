api: mindspore.nn.GroupNorm(num_groups, num_channels, eps=1e-05, affine=True, gamma_init='ones',
  beta_init='zeros')
constraints:
  affine:
    default: true
    descp: "affine (bool) \u2013 A bool value, this layer will have learnable affine\
      \ parameters when set to true . Default: True ."
    dtype:
    - bool
  beta_init:
    default: zeros
    descp: "beta_init (Union[Tensor, str, Initializer, numbers.Number]) \u2013 Initializer\
      \ for the beta weight. The values of str refer to the function initializer including\
      \ 'zeros' , 'ones' , 'xavier_uniform' , 'he_uniform' , etc. Default: 'zeros'\
      \ . If beta_init is a Tensor, the shape must be ((num_channels))."
    dtype:
    - str
    enum:
    - zeros
    - ones
    - xavier_uniform
    - he_uniform
  eps:
    default: 1e-05
    descp: "eps (float) \u2013 A value added to the denominator for numerical stability.\
      \ Default: 1e-05 ."
    dtype:
    - float
  gamma_init:
    default: ones
    descp: "gamma_init (Union[Tensor, str, Initializer, numbers.Number]) \u2013 Initializer\
      \ for the gamma weight. The values of str refer to the function initializer\
      \ including 'zeros' , 'ones' , 'xavier_uniform' , 'he_uniform' , etc. Default:\
      \ 'ones' . If gamma_init is a Tensor, the shape must be ((num_channels))."
    dtype:
    - str
    enum:
    - zeros
    - ones
    - xavier_uniform
    - he_uniform
  num_channels:
    default: null
    descp: "num_channels (int) \u2013 The number of input channels."
    dtype:
    - int
    range: null
    structure:
    - single
  num_groups:
    default: null
    descp: "num_groups (int) \u2013 The number of groups to be divided along the channel\
      \ dimension."
    dtype:
    - int
    range: null
    structure:
    - single
descp: Group Normalization over a mini-batch of inputs.
inputs:
  optional:
  - eps
  - affine=
  - gamma_init
  - beta_init
  required:
  - num_groups
  - num_channels
