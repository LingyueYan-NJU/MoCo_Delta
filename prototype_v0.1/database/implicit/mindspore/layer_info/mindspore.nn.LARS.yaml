api: 'mindspore.nn.LARS(optimizer, epsilon=1e-05, coefficient=0.001, use_clip=False,
  lars_filter=lambda x: ...)'
constraints:
  coefficient:
    default: 0.001
    descp: "coefficient (float) \u2013 Trust coefficient for calculating the local\
      \ learning rate. Default: 0.001 ."
    dtype:
    - float
  epsilon:
    default: 1e-05
    descp: "epsilon (float) \u2013 Term added to the denominator to improve numerical\
      \ stability. Default: 1e-05 ."
    dtype:
    - float
  lars_filter:
    default: null
    descp: "lars_filter (Function) \u2013 A function to determine which of the network\
      \ parameters to use LARS algorithm. Default: lambda x: \u2018LayerNorm\u2019\
      \ not in x.name and \u2018bias\u2019 not in x.name."
    dtype:
    - function
  optimizer:
    default: null
    descp: "optimizer (mindspore.nn.Optimizer) \u2013 MindSpore optimizer for which\
      \ to wrap and modify gradients."
    dtype:
    - mindspore.nn.optimizer
  use_clip:
    default: false
    descp: "use_clip (bool) \u2013 Whether to use clip operation for calculating the\
      \ local learning rate. Default: False ."
    dtype:
    - bool
descp: Implements the LARS algorithm.
inputs:
  optional:
  - optimizer
  - epsilon
  - coefficient
  - use_clip
  - lars_filter
  required: []
