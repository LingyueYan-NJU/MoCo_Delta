api: tf.keras.layers.SeparableConv1D(filters, kernel_size, strides=1, padding='valid',
  data_format=None, dilation_rate=1, depth_multiplier=1, activation=None, use_bias=True,
  depthwise_initializer='glorot_uniform', pointwise_initializer='glorot_uniform',
  bias_initializer='zeros', depthwise_regularizer=None, pointwise_regularizer=None,
  bias_regularizer=None, activity_regularizer=None, depthwise_constraint=None, pointwise_constraint=None,
  bias_constraint=None, **kwargs)
constraints:
  activation:
    default: None
    descp: Activation function to use. If you don't specify anything, no activation
      is applied (see keras.activations).
    dtype: tf.string
    enum:
    - softmax
    - elu
    - selu
    - softplus
    - softsign
    - swish
    - relu
    - gelu
    - tanh
    - sigmoid
    - exponential
    - hard_sigmoid
    - linear
    - serialize
    - deserialize
  activity_regularizer:
    default: None
    descp: Optional regularizer function for the output (see keras.regularizers).
    dtype: tf.string
  bias_constraint:
    default: None
    descp: Optional projection function to be applied to the bias after being updated
      by an Optimizer (see keras.constraints).
    dtype: tf.string
  bias_initializer:
    default: zeros
    descp: An initializer for the bias vector. If None, the default initializer ('zeros')
      will be used (see keras.initializers).
    dtype: tf.string
  bias_regularizer:
    default: None
    descp: Optional regularizer for the bias vector (see keras.regularizers).
    dtype: tf.string
  data_format:
    default: None
    descp: A string, one of channels_last (default) or channels_first.  The ordering
      of the dimensions in the inputs. channels_last corresponds to inputs with shape
      (batch_size, length, channels) while channels_first corresponds to inputs with
      shape (batch_size, channels, length).
    dtype: tf.string
    enum:
    - channels_first
    - channels_last
  depth_multiplier:
    default: 1
    descp: The number of depthwise convolution output channels for each input channel.
      The total number of depthwise convolution output channels will be equal to num_filters_in
      * depth_multiplier.
    dtype: int
    range:
    - 0
    - 2048
    shape: 1
    structure: integer
  depthwise_constraint:
    default: None
    descp: Optional projection function to be applied to the depthwise kernel after
      being updated by an Optimizer (e.g. used for norm constraints or value constraints
      for layer weights). The function must take as input the unprojected variable
      and must return the projected variable (which must have the same shape). Constraints
      are not safe to use when doing asynchronous distributed training (see keras.constraints).
    dtype: tf.string
  depthwise_initializer:
    default: glorot_uniform
    descp: An initializer for the depthwise convolution kernel (see keras.initializers).
      If None, then the default initializer ('glorot_uniform') will be used.
    dtype: tf.string
  depthwise_regularizer:
    default: None
    descp: Optional regularizer for the depthwise convolution kernel (see keras.regularizers).
    dtype: tf.string
  dilation_rate:
    default: 1
    descp: A single integer, specifying the dilation rate to use for dilated convolution.
    dtype: int
    range:
    - 0
    - 6
    shape: 1
    structure: integer
  filters:
    descp: Integer, the dimensionality of the output space (i.e. the number of filters
      in the convolution).
    dtype: int
    range:
    - 0
    - 2048
    shape: 1
    structure: integer
  kernel_size:
    descp: A single integer specifying the spatial dimensions of the filters.
    dtype: int
    range:
    - 0
    - 128
    shape: 1
    structure: integer
  name:
    default: None
    dtype: tf.string
  padding:
    default: valid
    descp: One of "valid", "same", or "causal" (case-insensitive). "valid" means no
      padding. "same" results in padding with zeros evenly to the left/right or up/down
      of the input such that output has the same height/width dimension as the input.
      "causal" results in causal (dilated) convolutions, e.g. output[t] does not depend
      on input[t+1:].
    dtype: tf.string
    enum:
    - causal
    - same
    - valid
  pointwise_constraint:
    default: None
    descp: Optional projection function to be applied to the pointwise kernel after
      being updated by an Optimizer (see keras.constraints).
    dtype: tf.string
  pointwise_initializer:
    default: glorot_uniform
    descp: An initializer for the pointwise convolution kernel (see keras.initializers).
      If None, then the default initializer ('glorot_uniform') will be used.
    dtype: tf.string
  pointwise_regularizer:
    default: None
    descp: Optional regularizer for the pointwise convolution kernel (see keras.regularizers).
    dtype: tf.string
  strides:
    default: 1
    descp: A single integer specifying the strides of the convolution. Specifying
      any stride value != 1 is incompatible with specifying any dilation_rate value
      != 1.
    dtype: int
    range:
    - 0
    - 6
    shape: 1
    structure: integer
  trainable:
    default: None
    descp: Boolean, if True the weights of this layer will be marked as trainable
      (and listed in layer.trainable_weights).
    dtype: tf.bool
  use_bias:
    default: true
    descp: Boolean, whether the layer uses a bias.
    dtype: tf.bool
descp: Depthwise separable 1D convolution.
required:
- filters
- kernel_size
