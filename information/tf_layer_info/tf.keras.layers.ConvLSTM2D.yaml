constraints:
  activation:
    default: tanh
    descp: Activation function to use. By default hyperbolic tangent activation function
      is applied (tanh(x)).
    dtype: tf.string
  activity_regularizer:
    default: None
    descp: Regularizer function applied to.
    dtype: tf.string
  bias_constraint:
    default: None
    descp: Constraint function applied to the bias vector.
    dtype: tf.string
  bias_initializer:
    default: zeros
    descp: Initializer for the bias vector.
    dtype: tf.string
  bias_regularizer:
    default: None
    descp: Regularizer function applied to the bias vector.
    dtype: tf.string
  data_format:
    default: None
    descp: A string, one of channels_last (default) or channels_first.  The ordering
      of the dimensions in the inputs. channels_last corresponds to inputs with shape
      (batch, time, ..., channels) while channels_first corresponds to inputs with
      shape (batch, time, channels, ...). When unspecified, uses image_data_format
      value found in your Keras config file at ~/.keras/keras.json (if exists) else
      'channels_last'. Defaults to 'channels_last'.
    dtype: tf.string
    enum:
    - channels_first
    - channels_last
  dilation_rate:
    default: (1, 1)
    descp: An integer or tuple/list of n integers, specifying the dilation rate to
      use for dilated convolution. Currently, specifying any dilation_rate value !=
      1 is incompatible with specifying any strides value != 1.
    dtype: int
    range:
    - 0
    - 6
    shape: 2
    structure:
    - integer
    - list
    - tuple
  dropout:
    default: 0.0
    descp: Float between 0 and 1. Fraction of the units to drop for the linear transformation
      of the inputs.
    dtype: float
  filters:
    descp: Integer, the dimensionality of the output space (i.e. the number of output
      filters in the convolution).
    dtype: int
    range:
    - 0
    - 2048
    shape: 1
    structure: integer
  go_backwards:
    default: false
    descp: Boolean (default False). If True, process the input sequence backwards.
    dtype: tf.bool
  kernel_constraint:
    default: None
    descp: Constraint function applied to the kernel weights matrix.
    dtype: tf.string
  kernel_initializer:
    default: glorot_uniform
    descp: Initializer for the kernel weights matrix, used for the linear transformation
      of the inputs.
    dtype: tf.string
  kernel_regularizer:
    default: None
    descp: Regularizer function applied to the kernel weights matrix.
    dtype: tf.string
  kernel_size:
    descp: An integer or tuple/list of n integers, specifying the dimensions of the
      convolution window.
    dtype: int
    range:
    - 0
    - 128
    shape: 2
    structure:
    - integer
    - list
    - tuple
  padding:
    default: valid
    descp: One of "valid" or "same" (case-insensitive). "valid" means no padding.
      "same" results in padding evenly to the left/right or up/down of the input such
      that output has the same height/width dimension as the input.
    dtype: tf.string
    enum:
    - same
    - valid
  recurrent_activation:
    default: hard_sigmoid
    descp: Activation function to use for the recurrent step.
    dtype: tf.string
  recurrent_constraint:
    default: None
    descp: Constraint function applied to the recurrent_kernel weights matrix.
    dtype: tf.string
  recurrent_dropout:
    default: 0.0
    descp: Float between 0 and 1. Fraction of the units to drop for the linear transformation
      of the recurrent state.
    dtype: float
  recurrent_initializer:
    default: orthogonal
    descp: Initializer for the recurrent_kernel weights matrix, used for the linear
      transformation of the recurrent state.
    dtype: tf.string
  recurrent_regularizer:
    default: None
    descp: Regularizer function applied to the recurrent_kernel weights matrix.
    dtype: tf.string
  return_sequences:
    default: false
    descp: Boolean. Whether to return the last output in the output sequence, or the
      full sequence. (default False)
    dtype: tf.bool
  return_state:
    default: false
    descp: Boolean Whether to return the last state in addition to the output. (default
      False)
    dtype: tf.bool
  stateful:
    default: false
    descp: Boolean (default False). If True, the last state for each sample at index
      i in a batch will be used as initial state for the sample of index i in the
      following batch.
    dtype: tf.bool
  strides:
    default: (1, 1)
    descp: An integer or tuple/list of n integers, specifying the strides of the convolution.
      Specifying any stride value != 1 is incompatible with specifying any dilation_rate
      value != 1.
    dtype: int
    range:
    - 0
    - 6
    shape: 2
    structure:
    - integer
    - list
    - tuple
  unit_forget_bias:
    default: true
    descp: Boolean. If True, add 1 to the bias of the forget gate at initialization.
      Use in combination with bias_initializer="zeros". This is recommended in Jozefowicz
      et al., 2015
    dtype: tf.bool
  use_bias:
    default: true
    descp: Boolean, whether the layer uses a bias vector.
    dtype: tf.bool
descp: 2D Convolutional LSTM.
required:
- filters
- kernel_size
