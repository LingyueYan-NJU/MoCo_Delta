api: paddle.nn.Conv1DTranspose
constraints:
  bias_attr:
    default: None
    descp: 'The parameter attribute for the bias of conv1d_transpose. If it is set
      to False, no bias will be added to the output units. If it is set to None or
      one attribute of ParamAttr, conv1d_transpose will create ParamAttr as bias_attr.
      If the Initializer of the bias_attr is not set, the bias is initialized zero.
      Default: None'
    dtype:
    - bool
    - ParamAttr
    enum: null
    range: null
    shape: null
    structure:
    - ParamAttr
    - bool
  dilation:
    default: '1'
    descp: 'The dilation size. It means the spacing between the kernel points. If
      dilation is a tuple/list, it must contain one integer, (dilation_size). Default:
      dilation = 1'
    dtype:
    - int
    enum: null
    range: null
    shape: 1
    structure:
    - int
    - tuple
    - list
  groups:
    default: '1'
    descp: 'The groups number of the Conv2D transpose layer. Inspired by grouped convolution
      in Alex Krizhevsky’s Deep CNN paper, in which when group=2, the first half of
      the filters is only connected to the first half of the input channels, while
      the second half of the filters is only connected to the second half of the input
      channels. Default: groups = 1'
    dtype:
    - int
    enum: null
    range: null
    shape: null
    structure:
    - int
  in_channels:
    default: null
    descp: The number of channels in the input image
    dtype:
    - int
    enum: null
    range: null
    shape: null
    structure:
    - int
  kernel_size:
    default: null
    descp: 'The filter size. If kernel_size is a tuple/list, it must contain one integers,
      (kernel_size). None if use output size to calculate kernel_size. Default: None.
      kernel_size and output_size should not be None at the same time'
    dtype:
    - int
    enum: null
    range: null
    shape: 1
    structure:
    - int
    - tuple
    - list
  out_channels:
    default: null
    descp: The number of the filter. It is as same as the output feature map
    dtype:
    - int
    enum: null
    range: null
    shape: null
    structure:
    - int
  output_padding:
    default: '0'
    descp: 'The count of zeros to be added to tail of each dimension. If it is a tuple/list,
      it must contain one integer. Default: 0'
    dtype:
    - int
    enum: null
    range: null
    shape: 1
    structure:
    - int
    - list
    - tuple
  padding:
    default: '0'
    descp: 'The padding size. The padding argument effectively adds dilation * (kernel
      - 1) amount of zero-padding on both sides of input. If padding is a string,
      either ‘VALID’ or ‘SAME’ supported, which is the padding algorithm. If padding
      is a tuple or list, it could be in two forms: [pad] or [pad_left, pad_right].
      Default: padding = 0'
    dtype:
    - str
    - int
    enum:
    - valid
    - same
    range: null
    shape: 1
    structure:
    - int
    - list
    - str
    - tuple
  stride:
    default: '1'
    descp: 'The stride size. It means the stride in transposed convolution. If stride
      is a tuple/list, it must contain one integer, (stride_size). Default: stride
      = 1'
    dtype:
    - int
    enum: null
    range: null
    shape: 1
    structure:
    - int
    - tuple
    - list
  weight_attr:
    default: None
    descp: 'The parameter attribute for learnable parameters/weights of conv1d_transpose.
      If it is set to None or one attribute of ParamAttr, conv1d_transpose will create
      ParamAttr as param_attr. If the Initializer of the param_attr is not set, the
      parameter is initialized with Xavier. Default: None'
    dtype:
    - ParamAttr
    enum: null
    range: null
    shape: null
    structure:
    - ParamAttr
descp: This interface is used to construct a callable object of the Conv1DTranspose
  class. For more details, refer to code examples. The 1-D convolution transpose layer
  calculates the output based on the input, filter, and dilation, stride, padding.
  Input(Input) and output(Output) are in ‘NCL’ format or ‘NLC’ where N is batch size,
  C is the number of channels, L is the length of the feature. The details of convolution
  transpose layer, please refer to the following explanation and references therein.
  If bias attribution and activation type are provided, bias is added to the output
  of the convolution, and the corresponding activation function is applied to the
  final result.
inputs:
  optional:
  - stride
  - padding
  - output_padding
  - groups
  - dilation
  - weight_attr
  - bias_attr
  - data_format
  required:
  - in_channels
  - out_channels
  - kernel_size
