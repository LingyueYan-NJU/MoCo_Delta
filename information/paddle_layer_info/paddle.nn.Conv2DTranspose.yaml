api: paddle.nn.Conv2DTranspose
constraints:
  bias_attr:
    default: None
    descp: 'The attribute for the bias of conv2d_transpose. If it is set to False,
      no bias will be added to the output units. If it is set to None or one attribute
      of ParamAttr, conv2d_transpose will create ParamAttr as bias_attr. If the Initializer
      of the bias_attr is not set, the bias is initialized zero. Default: None'
    dtype:
    - bool
    - ParamAttr
    enum: null
    range: null
    shape: null
    structure:
    - ParamAttr
    - bool
  data_format:
    default: '''NCHW'''
    descp: "Data format that specifies the layout of input. It can be \u201CNCHW\u201D\
      \ or \u201CNHWC\u201D. Default: \u201CNCHW\u201D"
    dtype:
    - str
    enum:
    - NCHW
    - NHWC
    range: null
    shape: null
    structure:
    - str
  dilation:
    default: '1'
    descp: 'The dilation size. If dilation is a list/tuple, it must contain two integers,
      (dilation_H, dilation_W). Otherwise, the dilation_H = dilation_W = dilation.
      Default: 1'
    dtype:
    - int
    enum: null
    range: null
    shape: 2
    structure:
    - int
    - list
    - tuple
  groups:
    default: '1'
    descp: "The groups number of the Conv2D transpose layer. Inspired by grouped convolution\
      \ in Alex Krizhevsky\u2019s Deep CNN paper, in which when group=2, the first\
      \ half of the filters is only connected to the first half of the input channels,\
      \ while the second half of the filters is only connected to the second half\
      \ of the input channels. Default: 1"
    dtype:
    - int
    enum: null
    range: null
    shape: null
    structure:
    - int
  in_channels:
    default: null
    descp: The number of channels in the input image
    dtype:
    - int
    enum: null
    range: null
    shape: null
    structure:
    - int
  kernel_size:
    default: null
    descp: The kernel size. If kernel_size is a list/tuple, it must contain two integers,
      (kernel_size_H, kernel_size_W). Otherwise, the kernel will be a square
    dtype:
    - int
    enum: null
    range: null
    shape: 2
    structure:
    - int
    - list
    - tuple
  out_channels:
    default: null
    descp: The number of channels produced by the convolution
    dtype:
    - int
    enum: null
    range: null
    shape: null
    structure:
    - int
  output_padding:
    default: '0'
    descp: 'Additional size added to one side of each dimension in the output shape.
      Default: 0'
    dtype:
    - int
    enum: null
    range: null
    shape: 2
    structure:
    - int
    - list
    - tuple
  padding:
    default: '0'
    descp: "The padding size. Padding coule be in one of the following forms. 1. a\
      \ string in [\u2018valid\u2019, \u2018same\u2019]. 2. an int, which means each\
      \ spartial dimension(depth, height, width) is zero paded by size of padding\
      \ on both sides 3. a list[int] or tuple[int] whose length is the number of spartial\
      \ dimensions, which contains the amount of padding on each side for each spartial\
      \ dimension. It has the form [pad_d1, pad_d2, \u2026]. 4. a list[int] or tuple[int]\
      \ whose length is 2 * number of spartial dimensions. It has the form [pad_before,\
      \ pad_after, pad_before, pad_after, \u2026] for all spartial dimensions. 5.\
      \ a list or tuple of pairs of ints. It has the form [[pad_before, pad_after],\
      \ [pad_before, pad_after], \u2026]. Note that, the batch dimension and channel\
      \ dimension are also included. Each pair of integers correspond to the amount\
      \ of padding for a dimension of the input. Padding in batch dimension and channel\
      \ dimension should be [0, 0] or (0, 0). The default value is 0"
    dtype:
    - str
    - int
    enum:
    - valid
    - same
    range: null
    shape: 2
    structure:
    - int
    - str
    - tuple
    - list
  stride:
    default: '1'
    descp: 'The stride size. If stride is a list/tuple, it must contain two integers,
      (stride_H, stride_W). Otherwise, the stride_H = stride_W = stride. Default:
      1'
    dtype:
    - int
    enum: null
    range: null
    shape: 2
    structure:
    - int
    - list
    - tuple
  weight_attr:
    default: None
    descp: 'The parameter attribute for learnable weights(Parameter) of conv2d_transpose.
      If it is set to None or one attribute of ParamAttr, conv2d_transpose will create
      ParamAttr as param_attr. If the Initializer of the param_attr is not set, the
      parameter is initialized with Xavier. Default: None'
    dtype:
    - ParamAttr
    enum: null
    range: null
    shape: null
    structure:
    - ParamAttr
descp: "This interface is used to construct a callable object of the Conv2DTranspose\
  \ class. For more details, refer to code examples. The convolution2D transpose layer\
  \ calculates the output based on the input, filter, and dilations, strides, paddings.\
  \ Input and output are in NCHW format. Where N is batch size, C is the number of\
  \ feature map, H is the height of the feature map, and W is the width of the feature\
  \ map. Filter\u2019s shape is [CMHW] , where C is the number of input feature map,\
  \ M is the number of output feature map, H is the height of the filter, and W is\
  \ the width of the filter. If the groups is greater than 1, C will equal the number\
  \ of input feature map divided by the groups. If bias attribution and activation\
  \ type are provided, bias is added to the output of the convolution, and the corresponding\
  \ activation function is applied to the final result. The details of convolution\
  \ transpose layer, please refer to the following explanation and references conv2dtranspose\
  \ . For each input \\(X\\), the equation is:"
inputs:
  optional:
  - stride
  - padding
  - output_padding
  - dilation
  - groups
  - weight_attr
  - bias_attr
  - data_format
  required:
  - in_channels
  - out_channels
  - kernel_size
