api: tf.keras.layers.DepthwiseConv1D(kernel_size, strides=1, padding='valid', depth_multiplier=1,
  data_format=None, dilation_rate=1, activation=None, use_bias=True, depthwise_initializer='glorot_uniform',
  bias_initializer='zeros', depthwise_regularizer=None, bias_regularizer=None, activity_regularizer=None,
  depthwise_constraint=None, bias_constraint=None, **kwargs)
constraints:
  activation:
    default: None
    descp: Activation function to use. If you don't specify anything, no activation
      is applied (see keras.activations).
    dtype: tf.string
  activity_regularizer:
    default: None
    descp: Regularizer function applied to the output of the layer (its 'activation')
      (see keras.regularizers).
    dtype: tf.string
  bias_constraint:
    default: None
    descp: Constraint function applied to the bias vector (see keras.constraints).
    dtype: tf.string
  bias_initializer:
    default: zeros
    descp: Initializer for the bias vector (see keras.initializers). If None, the
      default initializer ('zeros') will be used.
    dtype: tf.string
  bias_regularizer:
    default: None
    descp: Regularizer function applied to the bias vector (see keras.regularizers).
    dtype: tf.string
  data_format:
    default: None
    descp: A string, one of channels_last (default) or channels_first.  The ordering
      of the dimensions in the inputs. channels_last corresponds to inputs with shape
      (batch_size, height, width, channels) while channels_first corresponds to inputs
      with shape (batch_size, channels, height, width). When unspecified, uses image_data_format
      value found in your Keras config file at ~/.keras/keras.json (if exists) else
      'channels_last'. Defaults to 'channels_last'.
    dtype: tf.string
    enum:
    - channels_first
    - channels_last
  depth_multiplier:
    default: 1
    descp: The number of depthwise convolution output channels for each input channel.
      The total number of depthwise convolution output channels will be equal to filters_in
      * depth_multiplier.
    dtype: int
    range:
    - 0
    - 2048
    structure: integer
  depthwise_constraint:
    default: None
    descp: Constraint function applied to the depthwise kernel matrix (see keras.constraints).
    dtype: tf.string
  depthwise_initializer:
    default: glorot_uniform
    descp: Initializer for the depthwise kernel matrix (see keras.initializers). If
      None, the default initializer ('glorot_uniform') will be used.
    dtype: tf.string
  depthwise_regularizer:
    default: None
    descp: Regularizer function applied to the depthwise kernel matrix (see keras.regularizers).
    dtype: tf.string
  kernel_size:
    descp: An integer, specifying the height and width of the 1D convolution window.
      Can be a single integer to specify the same value for all spatial dimensions.
    dtype: int
    range:
    - 0
    - 128
    shape: 1
    structure:
    - integer
    - list
    - tuple
  padding:
    default: valid
    descp: one of 'valid' or 'same' (case-insensitive). "valid" means no padding.
      "same" results in padding with zeros evenly to the left/right or up/down of
      the input such that output has the same height/width dimension as the input.
    dtype: tf.string
    enum:
    - same
    - valid
  strides:
    default: 1
    descp: An integer, specifying the strides of the convolution along the height
      and width. Can be a single integer to specify the same value for all spatial
      dimensions. Specifying any stride value != 1 is incompatible with specifying
      any dilation_rate value != 1.
    dtype: int
    range:
    - 0
    - 6
    shape: 1
    structure: integer
  use_bias:
    default: true
    descp: Boolean, whether the layer uses a bias vector.
    dtype: tf.bool
descp: Depthwise 1D convolution.
required:
- kernel_size
