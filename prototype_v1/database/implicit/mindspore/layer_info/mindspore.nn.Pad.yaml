api: mindspore.nn.Pad(paddings, mode='CONSTANT')
constraints:
  mode:
    default: CONSTANT
    descp: "mode (str) \u2013 Specifies padding mode. The optional values are \"CONSTANT\"\
      \ , \"REFLECT\" , \"SYMMETRIC\" . Default: \"CONSTANT\" ."
    dtype:
    - str
    enum:
    - CONSTANT
    - REFLECT
    - SYMMETRIC
  paddings:
    default: ((1, 1), (2, 2))
    descp: "paddings (tuple) \u2013 The shape of parameter paddings is ((N, 2)) .\
      \ N is the rank of input data. All elements of paddings are int type. For D\
      \ th dimension of the x, paddings[D, 0] indicates how many sizes to be extended\
      \ ahead of the D th dimension of the input tensor, and paddings[D, 1] indicates\
      \ how many sizes to be extended behind of the D th dimension of the input tensor.\
      \ The padded size of each dimension D of the output is: (paddings[D, 0] + input_x.dim_size(D)\
      \ + paddings[D, 1]), e.g.: mode = \"CONSTANT\". paddings = [[1,1], [2,2]]. x\
      \ = [[1,2,3], [4,5,6], [7,8,9]]. # The above can be seen: 1st dimension of `x`\
      \ is 3, 2nd dimension of `x` is 3. # Substitute into the formula to get: # 1st\
      \ dimension of output is paddings[0][0] + 3 + paddings[0][1] = 1 + 3 + 1 = 5.\
      \ # 2nd dimension of output is paddings[1][0] + 3 + paddings[1][1] = 2 + 3 +\
      \ 2 = 7. # So the shape of output is (5, 7).   "
    dtype: null
    shape: 2
    structure:
    - tuple
descp: Pads the input tensor according to the paddings and mode.
inputs:
  optional: []
  required:
  - paddings
