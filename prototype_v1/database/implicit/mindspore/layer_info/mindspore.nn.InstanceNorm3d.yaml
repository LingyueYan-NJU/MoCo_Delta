api: mindspore.nn.InstanceNorm3d(num_features, eps=1e-05, momentum=0.1, affine=True,
  gamma_init='ones', beta_init='zeros')
constraints:
  affine:
    default: true
    descp: "affine (bool) \u2013 A bool value. When set to True , gamma and beta can\
      \ be learned. Default: True ."
    dtype:
    - bool
  beta_init:
    default: zeros
    descp: "beta_init (Union[Tensor, str, Initializer, numbers.Number]) \u2013 Initializer\
      \ for the beta weight. The values of str refer to the function initializer including\
      \ 'zeros' , 'ones' , etc. When initialized with Tensor, the shape should be\
      \ ((C)). Default: 'zeros' ."
    dtype:
    - str
    enum:
    - zeros
    - ones
  eps:
    default: 1e-5
    descp: "eps (float) \u2013 A value added to the denominator for numerical stability.\
      \ Default: 1e-5 ."
    dtype:
    - float
  gamma_init:
    default: ones
    descp: "gamma_init (Union[Tensor, str, Initializer, numbers.Number]) \u2013 Initializer\
      \ for the gamma weight. The values of str refer to the function initializer\
      \ including 'zeros' , 'ones' , etc. When initialized with Tensor, the shape\
      \ should be ((C)). Default: 'ones' ."
    dtype:
    - str
    enum:
    - zeros
    - ones
  momentum:
    default: 0.1
    descp: "momentum (float) \u2013 A floating hyperparameter of the momentum for\
      \ the running_mean and running_var computation. Default: 0.1 ."
    dtype:
    - float
  num_features:
    default: null
    descp: "num_features (int) \u2013 C from an expected input of size ((N, C, D,\
      \ H, W))."
    dtype:
    - int
    range: null
    structure:
    - single
descp: This layer applies Instance Normalization over a 5D input (a mini-batch of
  3D inputs with additional channel dimension).
inputs:
  optional:
  - eps
  - momentum
  - affine
  - gamma_init
  - beta_init
  required:
  - num_features
