api: mindspore.nn.MultiMarginLoss(p=1, margin=1.0, reduction='mean', weight=None)
constraints:
  margin:
    default: 1.0
    descp: "margin (float, optional) \u2013 A parameter to change pairwise distance.\
      \ Default: 1.0."
    dtype:
    - float
  p:
    default: 1
    descp: "p (int, optional) \u2013 The norm degree for pairwise distance. Should\
      \ be 1 or 2. Default: 1 ."
    dtype:
    - int
    range: null
    structure:
    - single
  reduction:
    default: mean
    descp: "reduction (str, optional) \u2013 Apply specific reduction method to the\
      \ output: 'none' , 'mean' , 'sum' . Default: 'mean' .  'none': no reduction\
      \ will be applied. 'mean': the sum of the output will be divided by the number\
      \ of elements in the output. 'sum': the output will be summed.  "
    dtype:
    - str
    enum:
    - none
    - mean
    - sum
  weight:
    default: None
    descp: "weight (Tensor, optional) \u2013 The rescaling weight to each class with\
      \ shape ((C,)). Data type only support float32, float16 or float64. Default:\
      \ None , all classes are weighted equally."
    dtype:
    - tensor
descp: Creates a criterion that optimizes a multi-class classification hinge loss
  (margin-based loss) between input \(x\) (a 2D mini-batch Tensor) and output \(y\)
  (which is a 1D tensor of target class indices, \(0 \leq y \leq \text{x.
inputs:
  optional:
  - p
  - margin
  - reduction
  - weight
  required: []
