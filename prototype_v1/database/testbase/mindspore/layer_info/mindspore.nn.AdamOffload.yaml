api: mindspore.nn.AdamOffload(params, learning_rate=0.001, beta1=0.9, beta2=0.999,
  eps=1e-08, use_locking=False, use_nesterov=False, weight_decay=0.0, loss_scale=1.0)
descp: This optimizer will offload Adam optimizer to host CPU and keep parameters
  being updated on the device, to minimize the memory cost.
constraints:
  params:
    descp: 'params (Union[list[Parameter], list[dict]]) – Must be list of Parameter
      or list of dict. When the params is a list of dict, the string “params”, “lr”,
      “weight_decay”, and “order_params” are the keys can be parsed.  params: Required.
      Parameters in current group. The value must be a list of Parameter. lr: Optional.
      If “lr” in the keys, the value of corresponding learning rate will be used.
      If not, the learning_rate in optimizer will be used. Fixed and dynamic learning
      rate are supported. weight_decay: Optional. If “weight_decay” in the keys, the
      value of corresponding weight decay will be used. If not, the weight_decay in
      the optimizer will be used. It should be noted that weight decay can be a constant
      value or a Cell. It is a Cell only when dynamic weight decay is applied. Dynamic
      weight decay is similar to dynamic learning rate, users need to customize a
      weight decay schedule only with global step as input, and during training, the
      optimizer calls the instance of WeightDecaySchedule to get the weight decay
      value of current step. order_params: Optional. When parameters is grouped, this
      usually is used to maintain the order of parameters that appeared in the network
      to improve performance. The value should be parameters whose order will be followed
      in optimizer. If order_params in the keys, other keys will be ignored and the
      element of ‘order_params’ must be in one group of params.  '
    default: null
    dtype:
    - union[list[parameter], list[dict]]
    structure:
    - list
  learning_rate:
    descp: 'learning_rate (Union[float, int, Tensor, Iterable, LearningRateSchedule])
      – Default: 1e-3 .  float: The fixed learning rate value. Must be equal to or
      greater than 0. int: The fixed learning rate value. Must be equal to or greater
      than 0. It will be converted to float. Tensor: Its value should be a scalar
      or a 1-D vector. For scalar, fixed learning rate will be applied. For vector,
      learning rate is dynamic, then the i-th step will take the i-th value as the
      learning rate. Iterable: Learning rate is dynamic. The i-th step will take the
      i-th value as the learning rate. LearningRateSchedule: Learning rate is dynamic.
      During training, the optimizer calls the instance of LearningRateSchedule with
      step as the input to get the learning rate of current step.  '
    default: 1e-3
    dtype:
    - int
    - float
    structure:
    - single
    shape: null
    range: null
  beta1:
    descp: 'beta1 (float) – The exponential decay rate for the 1st moment estimations.
      Should be in range (0.0, 1.0). Default: 0.9 .'
    default: 0.9
    dtype:
    - float
  beta2:
    descp: 'beta2 (float) – The exponential decay rate for the 2nd moment estimations.
      Should be in range (0.0, 1.0). Default: 0.999 .'
    default: 0.999
    dtype:
    - float
  eps:
    descp: 'eps (float) – Term added to the denominator to improve numerical stability.
      Should be greater than 0. Default: 1e-8 .'
    default: 1e-8
    dtype:
    - float
  use_locking:
    descp: 'use_locking (bool) – Whether to enable a lock to protect the updating
      process of variable tensors. If true , updates of the w, m, and v tensors will
      be protected by a lock. If false , the result is unpredictable. Default: False
      .'
    default: False
    dtype:
    - bool
  use_nesterov:
    descp: 'use_nesterov (bool) – Whether to use Nesterov Accelerated Gradient (NAG)
      algorithm to update the gradients. If true , update the gradients using NAG.
      If false , update the gradients without using NAG. Default: False .'
    default: False
    dtype:
    - bool
  weight_decay:
    descp: 'weight_decay (Union[float, int, Cell]) – Weight decay (L2 penalty). Default:
      0.0 .  float: The fixed weight decay value. Must be equal to or greater than
      0. int: The fixed weight decay value. Must be equal to or greater than 0. It
      will be converted to float. Cell: Weight decay is dynamic. During training,
      the optimizer calls the instance of the Cell with step as the input to get the
      weight decay value of current step.  '
    default: 0.0
    dtype:
    - int
    - float
    - cell
    structure:
    - single
    shape: null
    range: null
  loss_scale:
    descp: 'loss_scale (float) – A floating point value for the loss scale. Should
      be greater than 0. In general, use the default value. Only when FixedLossScaleManager
      is used for training and the drop_overflow_update in FixedLossScaleManager is
      set to False , then this value needs to be the same as the loss_scale in FixedLossScaleManager.
      Refer to class mindspore.amp.FixedLossScaleManager for more details. Default:
      1.0 .'
    default: 1.0
    dtype:
    - float
inputs:
  optional:
  - learning_rate
  - beta1
  - beta2
  - eps
  - use_locking
  - use_nesterov
  - weight_decay
  - loss_scale
  required:
  - params
