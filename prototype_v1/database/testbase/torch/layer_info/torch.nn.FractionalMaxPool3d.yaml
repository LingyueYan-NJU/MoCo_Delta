api: torch.nn.FractionalMaxPool3d(class , kernel_size, output_size=None, output_ratio=None,
  return_indices=False, _random_samples=None)
constraints:
  kernel_size:
    descp: the size of the window to take a max over. Can be a single number k (for
      a square kernel of k x k x k) or a tuple (kt x kh x kw)
    dtype:
    - int
    - union[int, tuple[int, int, int]]
    - int
    - union[int, tuple[int, int, int]]
    structure:
    - single
    - tuple
    - single
    shape: null
    range: null
  output_size:
    descp: the target output size of the image of the form oT x oH x oW. Can be a
      tuple (oT, oH, oW) or a single number oH for a square image oH x oH x oH
    dtype:
    - int
    - union[int, tuple[int, int, int]]
    - int
    - union[int, tuple[int, int, int]]
    structure:
    - single
    - tuple
    - single
    shape: null
    range: null
  output_ratio:
    descp: If one wants to have an output size as a ratio of the input size, this
      option can be given. This has to be a number or tuple in the range (0, 1)
    dtype:
    - float
    - union[float, tuple[float, float, float]]
    - float
    - union[float, tuple[float, float, float]]
    structure:
    - single
    - tuple
    - single
    shape: null
  return_indices:
    descp: if True, will return the indices along with the outputs. Useful to pass
      to nn.MaxUnpool3d().
    default: 'False'
    dtype:
    - bool
descp: Applies a 3D fractional max pooling over an input signal composed of several
  input planes.
inputs:
  optional: []
  required:
  - kernel_size
  - output_size
  - output_ratio
  - return_indices
