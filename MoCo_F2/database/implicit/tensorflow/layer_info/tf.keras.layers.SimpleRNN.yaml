api: tf.keras.layers.SimpleRNN(units, activation='tanh', use_bias=True, kernel_initializer='glorot_uniform',
  recurrent_initializer='orthogonal', bias_initializer='zeros', kernel_regularizer=None,
  recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None,
  recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0,
  return_sequences=False, return_state=False, go_backwards=False, stateful=False,
  unroll=False, **kwargs)
constraints:
  activation:
    default: tanh
    descp: 'Activation function to use. Default: hyperbolic tangent (tanh). If you
      pass None, no activation is applied (ie. "linear" activation: a(x) = x).'
    dtype: tf.string
    enum:
    - tanh
    - None
  activity_regularizer:
    default: None
    descp: 'Regularizer function applied to the output of the layer (its "activation").
      Default: None.'
    dtype: tf.string
  bias_constraint:
    default: None
    descp: 'Constraint function applied to the bias vector. Default: None.'
    dtype: tf.string
  bias_initializer:
    default: zeros
    descp: 'Initializer for the bias vector. Default: zeros.'
    dtype: tf.string
  bias_regularizer:
    default: None
    descp: 'Regularizer function applied to the bias vector. Default: None.'
    dtype: tf.string
  dropout:
    default: 0.0
    descp: 'Float between 0 and 1. Fraction of the units to drop for the linear transformation
      of the inputs. Default: 0.'
    dtype: float
  go_backwards:
    default: false
    descp: Boolean (default False). If True, process the input sequence backwards
      and return the reversed sequence.
    dtype: tf.bool
  kernel_constraint:
    default: None
    descp: 'Constraint function applied to the kernel weights matrix. Default: None.'
    dtype: tf.string
  kernel_initializer:
    default: glorot_uniform
    descp: 'Initializer for the kernel weights matrix, used for the linear transformation
      of the inputs. Default: glorot_uniform.'
    dtype: tf.string
  kernel_regularizer:
    default: None
    descp: 'Regularizer function applied to the kernel weights matrix. Default: None.'
    dtype: tf.string
  recurrent_constraint:
    default: None
    descp: 'Constraint function applied to the recurrent_kernel weights matrix.  Default:
      None.'
    dtype: tf.string
  recurrent_dropout:
    default: 0.0
    descp: 'Float between 0 and 1. Fraction of the units to drop for the linear transformation
      of the recurrent state. Default: 0.'
    dtype: float
  recurrent_initializer:
    default: orthogonal
    descp: 'Initializer for the recurrent_kernel weights matrix, used for the linear
      transformation of the recurrent state.  Default: orthogonal.'
    dtype: tf.string
  recurrent_regularizer:
    default: None
    descp: 'Regularizer function applied to the recurrent_kernel weights matrix. Default:
      None.'
    dtype: tf.string
  return_sequences:
    default: false
    descp: 'Boolean. Whether to return the last output in the output sequence, or
      the full sequence. Default: False.'
    dtype: tf.bool
  return_state:
    default: false
    descp: 'Boolean. Whether to return the last state in addition to the output. Default:
      False'
    dtype: tf.bool
  stateful:
    default: false
    descp: Boolean (default False). If True, the last state for each sample at index
      i in a batch will be used as initial state for the sample of index i in the
      following batch.
    dtype: tf.bool
  units:
    descp: Positive integer, dimensionality of the output space.
    dtype: int
    range:
    - 0
    - 2048
    shape: 1
    structure: integer
  unroll:
    default: false
    descp: Boolean (default False). If True, the network will be unrolled, else a
      symbolic loop will be used. Unrolling can speed-up a RNN, although it tends
      to be more memory-intensive. Unrolling is only suitable for short sequences.
    dtype: tf.bool
  use_bias:
    default: true
    descp: Boolean, (default True), whether the layer uses a bias vector.
    dtype: tf.bool
descp: Fully-connected RNN where the output is to be fed back to input.
required:
- units
