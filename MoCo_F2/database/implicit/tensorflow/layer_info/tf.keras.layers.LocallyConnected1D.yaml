api: tf.keras.layers.LocallyConnected1D(filters, kernel_size, strides=1, padding='valid',
  data_format=None, activation=None, use_bias=True, kernel_initializer='glorot_uniform',
  bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None,
  kernel_constraint=None, bias_constraint=None, implementation=1, **kwargs)
constraints:
  activation:
    default: None
    descp: 'Activation function to use. If you don''t specify anything, no activation
      is applied (ie. "linear" activation: a(x) = x).'
    dtype: tf.string
    enum:
    - softmax
    - elu
    - selu
    - softplus
    - softsign
    - swish
    - relu
    - gelu
    - tanh
    - sigmoid
    - exponential
    - hard_sigmoid
    - linear
    - serialize
    - deserialize
  activity_regularizer:
    default: None
    descp: Regularizer function applied to the output of the layer (its "activation")..
    dtype: tf.string
  bias_constraint:
    default: None
    descp: Constraint function applied to the bias vector.
    dtype: tf.string
  bias_initializer:
    default: zeros
    descp: Initializer for the bias vector.
    dtype: tf.string
  bias_regularizer:
    default: None
    descp: Regularizer function applied to the bias vector.
    dtype: tf.string
  data_format:
    default: None
    descp: A string, one of channels_last (default) or channels_first. The ordering
      of the dimensions in the inputs. channels_last corresponds to inputs with shape
      (batch, length, channels) while channels_first corresponds to inputs with shape
      (batch, channels, length). When unspecified, uses image_data_format value found
      in your Keras config file at ~/.keras/keras.json (if exists) else 'channels_last'.
      Defaults to 'channels_last'.
    dtype: tf.string
    enum:
    - channels_first
    - channels_last
  filters:
    descp: Integer, the dimensionality of the output space (i.e. the number of output
      filters in the convolution).
    dtype: int
    range:
    - 0
    - 2048
    shape: 1
    structure: integer
  implementation:
    default: 1
    descp: 'implementation mode, either 1, 2, or 3. 1 loops over input spatial locations
      to perform the forward pass. It is memory-efficient but performs a lot of (small)
      ops.  2 stores layer weights in a dense but sparsely-populated 2D matrix and
      implements the forward pass as a single matrix-multiply. It uses a lot of RAM
      but performs few (large) ops.  3 stores layer weights in a sparse tensor and
      implements the forward pass as a single sparse matrix-multiply.   How to choose:   1:
      large, dense models,   2: small models,   3: large, sparse models,  where "large"
      stands for large     input/output activations (i.e. many filters, input_filters,     large
      input_size, output_size), and "sparse" stands for few     connections between
      inputs and outputs, i.e. small ratio     filters * input_filters * kernel_size
      / (input_size * strides),     where inputs to and outputs of the layer are assumed
      to have     shapes (input_size, input_filters), (output_size, filters)     respectively.  It
      is recommended to benchmark each in the setting     of interest to pick the
      most efficient one (in terms of speed and     memory usage). Correct choice
      of implementation can lead to     dramatic speed improvements (e.g. 50X), potentially
      at the expense     of RAM.  Also, only padding="valid" is supported by     implementation=1.'
    dtype: int
    range:
    - 1
    - 3
    shape: 1
    structure: integer
  kernel_constraint:
    default: None
    descp: Constraint function applied to the kernel matrix.
    dtype: tf.string
  kernel_initializer:
    default: glorot_uniform
    descp: Initializer for the kernel weights matrix.
    dtype: tf.string
  kernel_regularizer:
    default: None
    descp: Regularizer function applied to the kernel weights matrix.
    dtype: tf.string
  kernel_size:
    descp: An integer or tuple/list of a single integer, specifying the length of
      the 1D convolution window.
    dtype: int
    range:
    - 0
    - 128
    shape: 1
    structure:
    - integer
    - list
    - tuple
  padding:
    default: valid
    descp: Currently only supports "valid" (case-insensitive). "same" may be supported
      in the future. "valid" means no padding.
    dtype: tf.string
  strides:
    default: 1
    descp: An integer or tuple/list of a single integer, specifying the stride length
      of the convolution.
    dtype: int
    range:
    - 0
    - 6
    shape: 1
    structure:
    - integer
    - list
    - tuple
  use_bias:
    default: true
    descp: Boolean, whether the layer uses a bias vector.
    dtype: tf.bool
descp: Locally-connected layer for 1D inputs.
inputs:
  required:
  - filters
  - kernel_size
  optional:
  - activation
  - activity_regularizer
  - bias_constraint
  - bias_initializer
  - bias_regularizer
  - data_format
  - implementation
  - kernel_constraint
  - kernel_initializer
  - kernel_regularizer
  - padding
  - strides
  - use_bias
