api: jittor.nn.RNNCell(self, input_size, hidden_size, bias=True, nonlinearity = "tanh")
constraints:
  bias:
    default: 'True'
    dtype:
    - bool
  hidden_size:
    default: no default
    dtype:
    - int
  input_size:
    default: no default
    dtype:
    - int
  nonlinearity:
    default: '"tanh"'
    dtype:
    - str
    range:
    - '"tanh'
    - '"relu"'
descp: "    ''' An Elman RNN cell with tanh or ReLU non-linearity.\n\n    :param input_size:\
  \ The number of expected features in the input\n    :type input_size: int\n\n  \
  \  :param hidden_size: The number of features in the hidden state\n    :type hidden_size:\
  \ int\n\n    :param bias: If False, then the layer does not use bias weights b_ih\
  \ and b_hh. Default: True.\n    :type bias: bool, optional\n\n    :param nonlinearity:\
  \ The non-linearity to use. Can be either 'tanh' or 'relu'. Default: 'tanh'.\n \
  \   :type nonlinearity: str, optional\n\n    \n'''"
extra_para: 0
inputs:
  optional:
  - bias
  - nonlinearity
  required:
  - input_size
  - hidden_size
kind: layer
