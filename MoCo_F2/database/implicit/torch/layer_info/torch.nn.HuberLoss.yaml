api: torch.nn.HuberLoss(class , reduction='mean', delta=1.0)
constraints:
  reduction:
    descp: 'Specifies the reduction to apply to the output: none | mean | sum. none:
      no reduction will be applied, mean: the sum of the output will be divided by
      the number of elements in the output, sum: the output will be summed.'
    default: mean
    dtype:
    - str
    enum: null
  delta:
    descp: Specifies the threshold at which to change between delta-scaled L1 and
      L2 loss. The value must be positive.
    default: '1.0'
    dtype:
    - float
    structure:
    - single
    shape: null
descp: Creates a criterion that uses a squared term if the absolute element-wise error
  falls below delta and a delta-scaled L1 term otherwise. This loss combines advantages
  of both L1Loss and MSELoss; the delta-scaled L1 region makes the loss less sensitive
  to outliers than MSELoss, while the L2 region provides smoothness over L1Loss near
  0. See Huber loss for more information.
inputs:
  optional:
  - reduction
  - delta
  required: []
