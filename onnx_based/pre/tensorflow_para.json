{"data_format": [["tf.keras.layers.AveragePooling1D", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, steps, features) while channels_first corresponds to inputs with shape (batch, features, steps).\n"], ["tf.keras.layers.AveragePooling2D", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, height, width, channels) while channels_first corresponds to inputs with shape (batch, channels, height, width). When unspecified, uses image_data_format value found in your Keras config file at ~/.keras/keras.json (if exists) else 'channels_last'. Defaults to 'channels_last'.\n"], ["tf.keras.layers.AveragePooling3D", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, spatial_dim1, spatial_dim2, spatial_dim3, channels) while channels_first corresponds to inputs with shape (batch, channels, spatial_dim1, spatial_dim2, spatial_dim3). When unspecified, uses image_data_format value found in your Keras config file at ~/.keras/keras.json (if exists) else 'channels_last'. Defaults to 'channels_last'.\n"], ["tf.keras.layers.Conv1D", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch_size, width, channels) while channels_first corresponds to inputs with shape (batch_size, channels, width). Note that the channels_first format is currently not supported by TensorFlow on CPU.\n"], ["tf.keras.layers.Conv2D", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch_size, height, width, channels) while channels_first corresponds to inputs with shape (batch_size, channels, height, width). If left unspecified, it uses the image_data_format value found in your Keras config file at ~/.keras/keras.json (if exists) else 'channels_last'. Note that the channels_first format is currently not supported by TensorFlow on CPU. Defaults to 'channels_last'.\n"], ["tf.keras.layers.Conv3D", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape batch_shape + (spatial_dim1, spatial_dim2, spatial_dim3, channels) while channels_first corresponds to inputs with shape batch_shape + (channels, spatial_dim1, spatial_dim2, spatial_dim3). When unspecified, uses image_data_format value found in your Keras config file at ~/.keras/keras.json (if exists) else 'channels_last'. Note that the channels_first format is currently not supported by TensorFlow on CPU. Defaults to 'channels_last'.\n"], ["tf.keras.layers.Conv1DTranspose", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch_size, length, channels) while channels_first corresponds to inputs with shape (batch_size, channels, length).\n"], ["tf.keras.layers.Conv2DTranspose", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch_size, height, width, channels) while channels_first corresponds to inputs with shape (batch_size, channels, height, width). When unspecified, uses image_data_format value found in your Keras config file at ~/.keras/keras.json (if exists) else 'channels_last'. Defaults to \"channels_last\".\n"], ["tf.keras.layers.Conv3DTranspose", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch_size, depth, height, width, channels) while channels_first corresponds to inputs with shape (batch_size, channels, depth, height, width). When unspecified, uses image_data_format value found in your Keras config file at ~/.keras/keras.json (if exists) else 'channels_last'. Defaults to 'channels_last'.\n"], ["tf.keras.layers.Flatten", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, ..., channels) while channels_first corresponds to inputs with shape (batch, channels, ...). When unspecified, uses image_data_format value found in your Keras config file at ~/.keras/keras.json (if exists) else 'channels_last'. Defaults to 'channels_last'.\n"], ["tf.keras.layers.GlobalAveragePooling1D", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, steps, features) while channels_first corresponds to inputs with shape (batch, features, steps).\n"], ["tf.keras.layers.GlobalAveragePooling2D", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, height, width, channels) while channels_first corresponds to inputs with shape (batch, channels, height, width). When unspecified, uses image_data_format value found in your Keras config file at ~/.keras/keras.json (if exists) else 'channels_last'. Defaults to 'channels_last'.\n"], ["tf.keras.layers.GlobalAveragePooling3D", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, spatial_dim1, spatial_dim2, spatial_dim3, channels) while channels_first corresponds to inputs with shape (batch, channels, spatial_dim1, spatial_dim2, spatial_dim3). When unspecified, uses image_data_format value found in your Keras config file at ~/.keras/keras.json (if exists) else 'channels_last'. Defaults to 'channels_last'.\n"], ["tf.keras.layers.GlobalMaxPooling1D", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, steps, features) while channels_first corresponds to inputs with shape (batch, features, steps).\n"], ["tf.keras.layers.GlobalMaxPooling2D", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, height, width, channels) while channels_first corresponds to inputs with shape (batch, channels, height, width). When unspecified, uses image_data_format value found in your Keras config file at ~/.keras/keras.json (if exists) else 'channels_last'. Defaults to 'channels_last'.\n"], ["tf.keras.layers.GlobalMaxPooling3D", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, spatial_dim1, spatial_dim2, spatial_dim3, channels) while channels_first corresponds to inputs with shape (batch, channels, spatial_dim1, spatial_dim2, spatial_dim3). When unspecified, uses image_data_format value found in your Keras config file at ~/.keras/keras.json (if exists) else 'channels_last'. Defaults to 'channels_last'.\n"], ["tf.keras.layers.MaxPooling1D", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, steps, features) while channels_first corresponds to inputs with shape (batch, features, steps).\n"], ["tf.keras.layers.MaxPooling2D", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, height, width, channels) while channels_first corresponds to inputs with shape (batch, channels, height, width). When unspecified, uses image_data_format value found in your Keras config file at ~/.keras/keras.json (if exists) else 'channels_last'. Defaults to 'channels_last'.\n"], ["tf.keras.layers.MaxPooling3D", "A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, spatial_dim1, spatial_dim2, spatial_dim3, channels) while channels_first corresponds to inputs with shape (batch, channels, spatial_dim1, spatial_dim2, spatial_dim3). When unspecified, uses image_data_format value found in your Keras config file at ~/.keras/keras.json (if exists) else 'channels_last'. Defaults to 'channels_last'.\n"]], "padding": [["tf.keras.layers.AveragePooling1D", "One of \"valid\" or \"same\" (case-insensitive). \"valid\" means no padding. \"same\" results in padding evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.\n"], ["tf.keras.layers.AveragePooling2D", "One of \"valid\" or \"same\" (case-insensitive). \"valid\" means no padding. \"same\" results in padding evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.\n"], ["tf.keras.layers.AveragePooling3D", "One of \"valid\" or \"same\" (case-insensitive). \"valid\" means no padding. \"same\" results in padding evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.\n"], ["tf.keras.layers.Conv1D", "One of \"valid\", \"same\" or \"causal\" (case-insensitive). \"valid\" means no padding. \"same\" results in padding with zeros evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input. \"causal\" results in causal (dilated) convolutions, e.g. output[t] does not depend on input[t+1:]. Useful when modeling temporal data where the model should not violate the temporal order. See WaveNet: A Generative Model for Raw Audio, section  2.1.\n"], ["tf.keras.layers.Conv2D", "one of \"valid\" or \"same\" (case-insensitive). \"valid\" means no padding. \"same\" results in padding with zeros evenly to the left/right or up/down of the input. When padding=\"same\" and strides=1, the output has the same size as the input.\n"], ["tf.keras.layers.Conv3D", "one of \"valid\" or \"same\" (case-insensitive). \"valid\" means no padding. \"same\" results in padding with zeros evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.\n"], ["tf.keras.layers.Conv1DTranspose", "one of \"valid\" or \"same\" (case-insensitive). \"valid\" means no padding. \"same\" results in padding with zeros evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.\n"], ["tf.keras.layers.Conv2DTranspose", "one of \"valid\" or \"same\" (case-insensitive). \"valid\" means no padding. \"same\" results in padding with zeros evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.\n"], ["tf.keras.layers.Conv3DTranspose", "one of \"valid\" or \"same\" (case-insensitive). \"valid\" means no padding. \"same\" results in padding with zeros evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.\n"], ["tf.keras.layers.MaxPooling1D", "One of \"valid\" or \"same\" (case-insensitive). \"valid\" means no padding. \"same\" results in padding evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.\n"], ["tf.keras.layers.MaxPooling2D", "One of \"valid\" or \"same\" (case-insensitive). \"valid\" means no padding. \"same\" results in padding evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.\n"], ["tf.keras.layers.MaxPooling3D", "One of \"valid\" or \"same\" (case-insensitive). \"valid\" means no padding. \"same\" results in padding evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.\n"]], "pool_size": [["tf.keras.layers.AveragePooling1D", "Integer, size of the average pooling windows.\n"], ["tf.keras.layers.AveragePooling2D", "integer or tuple of 2 integers, factors by which to downscale (vertical, horizontal). (2, 2) will halve the input in both spatial dimension. If only one integer is specified, the same window length will be used for both dimensions.\n"], ["tf.keras.layers.AveragePooling3D", "tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3). (2, 2, 2) will halve the size of the 3D input in each dimension.\n"], ["tf.keras.layers.MaxPooling1D", "Integer, size of the max pooling window.\n"], ["tf.keras.layers.MaxPooling2D", "integer or tuple of 2 integers, window size over which to take the maximum. (2, 2) will take the max value over a 2x2 pooling window. If only one integer is specified, the same window length will be used for both dimensions.\n"], ["tf.keras.layers.MaxPooling3D", "Tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3). (2, 2, 2) will halve the size of the 3D input in each dimension.\n"]], "strides": [["tf.keras.layers.AveragePooling1D", "Integer, or None. Factor by which to downscale. E.g. 2 will halve the input. If None, it will default to pool_size.\n"], ["tf.keras.layers.AveragePooling2D", "Integer, tuple of 2 integers, or None. Strides values. If None, it will default to pool_size.\n"], ["tf.keras.layers.AveragePooling3D", "tuple of 3 integers, or None. Strides values.\n"], ["tf.keras.layers.Conv1D", "An integer or tuple/list of a single integer, specifying the stride length of the convolution. Specifying any stride value != 1 is incompatible with specifying any dilation_rate value != 1.\n"], ["tf.keras.layers.Conv2D", "An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any dilation_rate value != 1.\n"], ["tf.keras.layers.Conv3D", "An integer or tuple/list of 3 integers, specifying the strides of the convolution along each spatial dimension. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any dilation_rate value != 1.\n"], ["tf.keras.layers.Conv1DTranspose", "An integer specifying the stride of the convolution along the time dimension. Specifying a stride value != 1 is incompatible with specifying a dilation_rate value != 1. Defaults to 1.\n"], ["tf.keras.layers.Conv2DTranspose", "An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any dilation_rate value != 1.\n"], ["tf.keras.layers.Conv3DTranspose", "An integer or tuple/list of 3 integers, specifying the strides of the convolution along the depth, height  and width. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any dilation_rate value != 1.\n"], ["tf.keras.layers.MaxPooling1D", "Integer, or None. Specifies how much the pooling window moves for each pooling step. If None, it will default to pool_size.\n"], ["tf.keras.layers.MaxPooling2D", "Integer, tuple of 2 integers, or None. Strides values. Specifies how far the pooling window moves for each pooling step. If None, it will default to pool_size.\n"], ["tf.keras.layers.MaxPooling3D", "tuple of 3 integers, or None. Strides values.\n"]], "axis": [["tf.keras.layers.BatchNormalization", "Integer, the axis that should be normalized (typically the features axis). For instance, after a Conv2D layer with data_format=\"channels_first\", set axis=1 in BatchNormalization.\n"], ["tf.concat", "0-D int32 Tensor. Dimension along which to concatenate. Must be in the range [-rank(values), rank(values)). As in Python, indexing for axis is 0-based. Positive axis in the rage of [0, rank(values)) refers to axis-th dimension. And negative axis refers to axis + rank(values)-th dimension.\n"], ["tf.keras.layers.LayerNormalization", "Integer or List/Tuple. The axis or axes to normalize across. Typically, this is the features axis/axes. The left-out axes are typically the batch axis/axes. -1 is the last dimension in the input. Defaults to -1.\n"], ["tf.reduce_max", "The dimensions to reduce. If None (the default), reduces all dimensions. Must be in the range [-rank(input_tensor), rank(input_tensor)).\n"], ["tf.reduce_mean", "The dimensions to reduce. If None (the default), reduces all dimensions. Must be in the range [-rank(input_tensor), rank(input_tensor)).\n"], ["tf.reduce_min", "The dimensions to reduce. If None (the default), reduces all dimensions. Must be in the range [-rank(input_tensor), rank(input_tensor)).\n"], ["tf.reduce_prod", "The dimensions to reduce. If None (the default), reduces all dimensions. Must be in the range [-rank(input_tensor), rank(input_tensor)).\n"], ["tf.reduce_sum", "The dimensions to reduce. If None (the default), reduces all dimensions. Must be in the range [-rank(input_tensor), rank(input_tensor)].\n"], ["tf.keras.activations.softmax", "Integer, axis along which the softmax normalization is applied.\n"], ["tf.keras.layers.Softmax", "Integer, or list of Integers, axis along which the softmax normalization is applied.\n"], ["tf.nn.softmax", "The dimension softmax would be performed on. The default is -1 which indicates the last dimension.\n"]], "beta_constraint": [["tf.keras.layers.BatchNormalization", "Optional constraint for the beta weight.\n"], ["tf.keras.layers.LayerNormalization", "Optional constraint for the beta weight. None by default.\n"]], "beta_initializer": [["tf.keras.layers.BatchNormalization", "Initializer for the beta weight.\n"], ["tf.keras.layers.LayerNormalization", "Initializer for the beta weight. Defaults to zeros.\n"]], "beta_regularizer": [["tf.keras.layers.BatchNormalization", "Optional regularizer for the beta weight.\n"], ["tf.keras.layers.LayerNormalization", "Optional regularizer for the beta weight. None by default.\n"]], "center": [["tf.keras.layers.BatchNormalization", "If True, add offset of beta to normalized tensor. If False, beta is ignored.\n"], ["tf.keras.layers.LayerNormalization", "If True, add offset of beta to normalized tensor. If False, beta is ignored. Defaults to True.\n"]], "epsilon": [["tf.keras.layers.BatchNormalization", "Small float added to variance to avoid dividing by zero.\n"], ["tf.keras.layers.LayerNormalization", "Small float added to variance to avoid dividing by zero. Defaults to 1e-3\n"]], "gamma_constraint": [["tf.keras.layers.BatchNormalization", "Optional constraint for the gamma weight.\n"], ["tf.keras.layers.LayerNormalization", "Optional constraint for the gamma weight. None by default.\n"]], "gamma_initializer": [["tf.keras.layers.BatchNormalization", "Initializer for the gamma weight.\n"], ["tf.keras.layers.LayerNormalization", "Initializer for the gamma weight. Defaults to ones.\n"]], "gamma_regularizer": [["tf.keras.layers.BatchNormalization", "Optional regularizer for the gamma weight.\n"], ["tf.keras.layers.LayerNormalization", "Optional regularizer for the gamma weight. None by default.\n"]], "momentum": [["tf.keras.layers.BatchNormalization", "Momentum for the moving average.\n"]], "moving_mean_initializer": [["tf.keras.layers.BatchNormalization", "Initializer for the moving mean.\n"]], "moving_variance_initializer": [["tf.keras.layers.BatchNormalization", "Initializer for the moving variance.\n"]], "scale": [["tf.keras.layers.BatchNormalization", "If True, multiply by gamma. If False, gamma is not used. When the next layer is linear (also e.g. nn.relu), this can be disabled since the scaling will be done by the next layer.\n"], ["tf.keras.layers.LayerNormalization", "If True, multiply by gamma. If False, gamma is not used. When the next layer is linear (also e.g. nn.relu), this can be disabled since the scaling will be done by the next layer. Defaults to True.\n"]], "synchronized": [["tf.keras.layers.BatchNormalization", "If True, synchronizes the global batch statistics (mean and variance) for the layer across all devices at each training step in a distributed training strategy. If False, each replica uses its own local batch statistics. Only relevant when used inside a tf.distribute strategy.\n"]], "name": [["tf.math.ceil", "A name for the operation (optional).\n"], ["tf.concat", "A name for the operation (optional).\n"], ["tf.constant", "Optional name for the tensor.\n"], ["tf.math.divide", "A name for the operation (optional).\n"], ["tf.nn.elu", "A name for the operation (optional).\n"], ["tf.math.erf", "A name for the operation (optional).\n"], ["tf.math.floor", "A name for the operation (optional).\n"], ["tf.nn.gelu", "A name for the operation (optional).\n"], ["tf.nn.lrn", "A name for the operation (optional).\n"], ["tf.math.maximum", "A name for the operation (optional).\n"], ["tf.minimum", "A name for the operation (optional).\n"], ["tf.math.floormod", "A name for the operation (optional).\n"], ["tf.math.multiply", "A name for the operation (optional).\n"], ["tf.math.pow", "A name for the operation (optional).\n"], ["tf.math.reciprocal", "A name for the operation (optional).\n"], ["tf.reduce_max", "A name for the operation (optional).\n"], ["tf.reduce_mean", "A name for the operation (optional).\n"], ["tf.reduce_min", "A name for the operation (optional).\n"], ["tf.reduce_prod", "A name for the operation (optional).\n"], ["tf.reduce_sum", "A name for the operation (optional).\n"], ["tf.nn.relu", "A name for the operation (optional).\n"], ["tf.math.round", "A name for the operation (optional).\n"], ["tf.nn.selu", "A name for the operation (optional).\n"], ["tf.shape", "A name for the operation (optional).\n"], ["tf.math.sigmoid", "A name for the operation (optional).\n"], ["tf.nn.softmax", "A name for the operation (optional).\n"], ["tf.math.softplus", "Optional: name to associate with this operation.\n"], ["tf.nn.softsign", "A name for the operation (optional).\n"], ["tf.math.subtract", "A name for the operation (optional).\n"], ["tf.math.tanh", "A name for the operation (optional).\n"]], "x": [["tf.math.ceil", "A tf.Tensor. Must be one of the following types: bfloat16, half, float32, float64. int32\n"], ["tf.math.divide", "A Tensor\n"], ["tf.keras.activations.elu", "Input tensor.\n"], ["tf.math.erf", "A Tensor. Must be one of the following types: bfloat16, half, float32, float64.\n"], ["tf.math.floor", "A Tensor. Must be one of the following types: bfloat16, half, float32, float64.\n"], ["tf.keras.activations.gelu", "Input tensor.\n"], ["tf.math.maximum", "A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, uint8, int16, uint16, int32, uint32, int64, uint64.\n"], ["tf.minimum", "A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, uint8, int16, uint16, int32, uint32, int64, uint64.\n"], ["tf.keras.activations.mish", "Input tensor.\n"], ["tf.math.floormod", "A Tensor. Must be one of the following types: int8, int16, int32, int64, uint8, uint16, uint32, uint64, bfloat16, half, float32, float64.\n"], ["tf.math.multiply", "A Tensor. Must be one of the following types: bfloat16, half, float32, float64, uint8, int8, uint16, int16, int32, int64, complex64, complex128.\n"], ["tf.math.pow", "A Tensor of type float16, float32, float64, int32, int64, complex64, or complex128.\n"], ["tf.math.reciprocal", "A Tensor. Must be one of the following types: bfloat16, half, float32, float64, int8, int16, int32, int64, complex64, complex128.\n"], ["tf.keras.activations.relu", "Input tensor or variable.\n"], ["tf.math.round", "A Tensor of type float16, float32, float64, int32, or int64.\n"], ["tf.keras.activations.selu", "A tensor or variable to compute the activation function for.\n"], ["tf.keras.activations.sigmoid", "Input tensor.\n"], ["tf.math.sigmoid", "A Tensor with type float16, float32, float64, complex64, or complex128.\n"], ["tf.keras.activations.softmax", "Input tensor.\n"], ["tf.keras.activations.softplus", "Input tensor.\n"], ["tf.keras.activations.softsign", "Input tensor.\n"], ["tf.math.subtract", "A Tensor. Must be one of the following types: bfloat16, half, float32, float64, uint8, int8, uint16, int16, int32, int64, complex64, complex128, uint32, uint64.\n"], ["tf.keras.activations.tanh", "Input tensor.\n"], ["tf.math.tanh", "A Tensor. Must be one of the following types: bfloat16, half, float32, float64, complex64, complex128.\n"]], "values": [["tf.concat", "A list of Tensor objects or a single Tensor.\n"]], "dtype": [["tf.constant", "The type of the elements of the resulting tensor.\n"]], "shape": [["tf.constant", "Optional dimensions of resulting tensor.\n"]], "value": [["tf.constant", "A constant value (or list) of output type dtype.\n"]], "activation": [["tf.keras.layers.Conv1D", "Activation function to use. If you don't specify anything, no activation is applied (see keras.activations).\n"], ["tf.keras.layers.Conv2D", "Activation function to use. If you don't specify anything, no activation is applied (see keras.activations).\n"], ["tf.keras.layers.Conv3D", "Activation function to use. If you don't specify anything, no activation is applied (see keras.activations).\n"], ["tf.keras.layers.Conv1DTranspose", "Activation function to use. If you don't specify anything, no activation is applied (see keras.activations).\n"], ["tf.keras.layers.Conv2DTranspose", "Activation function to use. If you don't specify anything, no activation is applied (see keras.activations).\n"], ["tf.keras.layers.Conv3DTranspose", "Activation function to use. If you don't specify anything, no activation is applied (see keras.activations).\n"]], "activity_regularizer": [["tf.keras.layers.Conv1D", "Regularizer function applied to the output of the layer (its \"activation\") (see keras.regularizers).\n"], ["tf.keras.layers.Conv2D", "Regularizer function applied to the output of the layer (its \"activation\") (see keras.regularizers).\n"], ["tf.keras.layers.Conv3D", "Regularizer function applied to the output of the layer (its \"activation\") (see keras.regularizers).\n"], ["tf.keras.layers.Conv1DTranspose", "Regularizer function applied to the output of the layer (its \"activation\") (see keras.regularizers).\n"], ["tf.keras.layers.Conv2DTranspose", "Regularizer function applied to the output of the layer (its \"activation\") (see keras.regularizers).\n"], ["tf.keras.layers.Conv3DTranspose", "Regularizer function applied to the output of the layer (its \"activation\") (see keras.regularizers).\n"]], "bias_constraint": [["tf.keras.layers.Conv1D", "Constraint function applied to the bias vector (see keras.constraints).\n"], ["tf.keras.layers.Conv2D", "Constraint function applied to the bias vector (see keras.constraints).\n"], ["tf.keras.layers.Conv3D", "Constraint function applied to the bias vector (see keras.constraints).\n"], ["tf.keras.layers.Conv1DTranspose", "Constraint function applied to the bias vector (see keras.constraints).\n"], ["tf.keras.layers.Conv2DTranspose", "Constraint function applied to the bias vector (see keras.constraints).\n"], ["tf.keras.layers.Conv3DTranspose", "Constraint function applied to the bias vector (see keras.constraints).\n"]], "bias_initializer": [["tf.keras.layers.Conv1D", "Initializer for the bias vector (see keras.initializers). Defaults to 'zeros'.\n"], ["tf.keras.layers.Conv2D", "Initializer for the bias vector (see keras.initializers). Defaults to 'zeros'.\n"], ["tf.keras.layers.Conv3D", "Initializer for the bias vector (see keras.initializers). Defaults to 'zeros'.\n"], ["tf.keras.layers.Conv1DTranspose", "Initializer for the bias vector (see keras.initializers). Defaults to 'zeros'.\n"], ["tf.keras.layers.Conv2DTranspose", "Initializer for the bias vector (see keras.initializers). Defaults to 'zeros'.\n"], ["tf.keras.layers.Conv3DTranspose", "Initializer for the bias vector (see keras.initializers). Defaults to 'zeros'.\n"]], "bias_regularizer": [["tf.keras.layers.Conv1D", "Regularizer function applied to the bias vector (see keras.regularizers).\n"], ["tf.keras.layers.Conv2D", "Regularizer function applied to the bias vector (see keras.regularizers).\n"], ["tf.keras.layers.Conv3D", "Regularizer function applied to the bias vector (see keras.regularizers).\n"], ["tf.keras.layers.Conv1DTranspose", "Regularizer function applied to the bias vector (see keras.regularizers).\n"], ["tf.keras.layers.Conv2DTranspose", "Regularizer function applied to the bias vector (see keras.regularizers).\n"], ["tf.keras.layers.Conv3DTranspose", "Regularizer function applied to the bias vector (see keras.regularizers).\n"]], "dilation_rate": [["tf.keras.layers.Conv1D", "an integer or tuple/list of a single integer, specifying the dilation rate to use for dilated convolution. Currently, specifying any dilation_rate value != 1 is incompatible with specifying any strides value != 1.\n"], ["tf.keras.layers.Conv2D", "an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution. Can be a single integer to specify the same value for all spatial dimensions. Currently, specifying any dilation_rate value != 1 is incompatible with specifying any stride value != 1.\n"], ["tf.keras.layers.Conv3D", "an integer or tuple/list of 3 integers, specifying the dilation rate to use for dilated convolution. Can be a single integer to specify the same value for all spatial dimensions. Currently, specifying any dilation_rate value != 1 is incompatible with specifying any stride value != 1.\n"], ["tf.keras.layers.Conv1DTranspose", "an integer, specifying the dilation rate to use for dilated convolution. Currently, specifying a dilation_rate value != 1 is incompatible with specifying a stride value != 1. Also dilation rate larger than 1 is not currently supported.\n"], ["tf.keras.layers.Conv2DTranspose", "an integer, specifying the dilation rate for all spatial dimensions for dilated convolution. Specifying different dilation rates for different dimensions is not supported. Currently, specifying any dilation_rate value != 1 is incompatible with specifying any stride value != 1.\n"], ["tf.keras.layers.Conv3DTranspose", "an integer or tuple/list of 3 integers, specifying the dilation rate to use for dilated convolution. Can be a single integer to specify the same value for all spatial dimensions. Currently, specifying any dilation_rate value != 1 is incompatible with specifying any stride value != 1.\n"]], "filters": [["tf.keras.layers.Conv1D", "Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).\n"], ["tf.keras.layers.Conv2D", "Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).\n"], ["tf.keras.layers.Conv3D", "Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).\n"], ["tf.keras.layers.Conv1DTranspose", "Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).\n"], ["tf.keras.layers.Conv2DTranspose", "Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).\n"], ["tf.keras.layers.Conv3DTranspose", "Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).\n"]], "groups": [["tf.keras.layers.Conv1D", "A positive integer specifying the number of groups in which the input is split along the channel axis. Each group is convolved separately with filters / groups filters. The output is the concatenation of all the groups results along the channel axis. Input channels and filters must both be divisible by groups.\n"], ["tf.keras.layers.Conv2D", "A positive integer specifying the number of groups in which the input is split along the channel axis. Each group is convolved separately with filters / groups filters. The output is the concatenation of all the groups results along the channel axis. Input channels and filters must both be divisible by groups.\n"], ["tf.keras.layers.Conv3D", "A positive integer specifying the number of groups in which the input is split along the channel axis. Each group is convolved separately with filters / groups filters. The output is the concatenation of all the groups results along the channel axis. Input channels and filters must both be divisible by groups.\n"]], "kernel_constraint": [["tf.keras.layers.Conv1D", "Constraint function applied to the kernel matrix (see keras.constraints).\n"], ["tf.keras.layers.Conv2D", "Constraint function applied to the kernel matrix (see keras.constraints).\n"], ["tf.keras.layers.Conv3D", "Constraint function applied to the kernel matrix (see keras.constraints).\n"], ["tf.keras.layers.Conv1DTranspose", "Constraint function applied to the kernel matrix (see keras.constraints).\n"], ["tf.keras.layers.Conv2DTranspose", "Constraint function applied to the kernel matrix (see keras.constraints).\n"], ["tf.keras.layers.Conv3DTranspose", "Constraint function applied to the kernel matrix (see keras.constraints).\n"]], "kernel_initializer": [["tf.keras.layers.Conv1D", "Initializer for the kernel weights matrix (see keras.initializers). Defaults to 'glorot_uniform'.\n"], ["tf.keras.layers.Conv2D", "Initializer for the kernel weights matrix (see keras.initializers). Defaults to 'glorot_uniform'.\n"], ["tf.keras.layers.Conv3D", "Initializer for the kernel weights matrix (see keras.initializers). Defaults to 'glorot_uniform'.\n"], ["tf.keras.layers.Conv1DTranspose", "Initializer for the kernel weights matrix (see keras.initializers). Defaults to 'glorot_uniform'.\n"], ["tf.keras.layers.Conv2DTranspose", "Initializer for the kernel weights matrix (see keras.initializers). Defaults to 'glorot_uniform'.\n"], ["tf.keras.layers.Conv3DTranspose", "Initializer for the kernel weights matrix (see keras.initializers). Defaults to 'glorot_uniform'.\n"]], "kernel_regularizer": [["tf.keras.layers.Conv1D", "Regularizer function applied to the kernel weights matrix (see keras.regularizers).\n"], ["tf.keras.layers.Conv2D", "Regularizer function applied to the kernel weights matrix (see keras.regularizers).\n"], ["tf.keras.layers.Conv3D", "Regularizer function applied to the kernel weights matrix (see keras.regularizers).\n"], ["tf.keras.layers.Conv1DTranspose", "Regularizer function applied to the kernel weights matrix (see keras.regularizers).\n"], ["tf.keras.layers.Conv2DTranspose", "Regularizer function applied to the kernel weights matrix (see keras.regularizers).\n"], ["tf.keras.layers.Conv3DTranspose", "Regularizer function applied to the kernel weights matrix (see keras.regularizers).\n"]], "kernel_size": [["tf.keras.layers.Conv1D", "An integer or tuple/list of a single integer, specifying the length of the 1D convolution window.\n"], ["tf.keras.layers.Conv2D", "An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window. Can be a single integer to specify the same value for all spatial dimensions.\n"], ["tf.keras.layers.Conv3D", "An integer or tuple/list of 3 integers, specifying the depth, height and width of the 3D convolution window. Can be a single integer to specify the same value for all spatial dimensions.\n"], ["tf.keras.layers.Conv1DTranspose", "An integer length of the 1D convolution window.\n"], ["tf.keras.layers.Conv2DTranspose", "An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window. Can be a single integer to specify the same value for all spatial dimensions.\n"], ["tf.keras.layers.Conv3DTranspose", "An integer or tuple/list of 3 integers, specifying the depth, height and width of the 3D convolution window. Can be a single integer to specify the same value for all spatial dimensions.\n"]], "use_bias": [["tf.keras.layers.Conv1D", "Boolean, whether the layer uses a bias vector.\n"], ["tf.keras.layers.Conv2D", "Boolean, whether the layer uses a bias vector.\n"], ["tf.keras.layers.Conv3D", "Boolean, whether the layer uses a bias vector.\n"], ["tf.keras.layers.Conv1DTranspose", "Boolean, whether the layer uses a bias vector.\n"], ["tf.keras.layers.Conv2DTranspose", "Boolean, whether the layer uses a bias vector.\n"], ["tf.keras.layers.Conv3DTranspose", "Boolean, whether the layer uses a bias vector.\n"]], "output_padding": [["tf.keras.layers.Conv1DTranspose", "An integer specifying the amount of padding along the time dimension of the output tensor. The amount of output padding must be lower than the stride. If set to None (default), the output shape is inferred.\n"], ["tf.keras.layers.Conv2DTranspose", "An integer or tuple/list of 2 integers, specifying the amount of padding along the height and width of the output tensor. Can be a single integer to specify the same value for all spatial dimensions. The amount of output padding along a given dimension must be lower than the stride along that same dimension. If set to None (default), the output shape is inferred.\n"], ["tf.keras.layers.Conv3DTranspose", "An integer or tuple/list of 3 integers, specifying the amount of padding along the depth, height, and width. Can be a single integer to specify the same value for all spatial dimensions. The amount of output padding along a given dimension must be lower than the stride along that same dimension. If set to None (default), the output shape is inferred.\n"]], "y": [["tf.math.divide", "A Tensor\n"], ["tf.math.maximum", "A Tensor. Must have the same type as x.\n"], ["tf.minimum", "A Tensor. Must have the same type as x.\n"], ["tf.math.floormod", "A Tensor. Must have the same type as x.\n"], ["tf.math.multiply", "A Tensor. Must have the same type as x.\n"], ["tf.math.pow", "A Tensor of type float16, float32, float64, int32, int64, complex64, or complex128.\n"], ["tf.math.subtract", "A Tensor. Must have the same type as x.\n"]], "noise_shape": [["tf.keras.layers.Dropout", "1D integer tensor representing the shape of the binary dropout mask that will be multiplied with the input. For instance, if your inputs have shape (batch_size, timesteps, features) and you want the dropout mask to be the same for all timesteps, you can use noise_shape=(batch_size, 1, features).\n"]], "rate": [["tf.keras.layers.Dropout", "Float between 0 and 1. Fraction of the input units to drop.\n"]], "seed": [["tf.keras.layers.Dropout", "A Python integer to use as random seed.\n"]], "equation": [["tf.einsum", "a str describing the contraction, in the same format as numpy.einsum.\n"]], "__________name": [["tf.einsum", "A name for the operation (optional).\n"]], "alpha": [["tf.keras.activations.elu", "A scalar, slope of negative section. alpha controls the value to which an ELU saturates for negative net inputs.\n"], ["tf.keras.layers.ELU", "Scale for the negative factor.\n"], ["tf.keras.layers.LeakyReLU", "Float >= 0.. Negative slope coefficient. Defaults to 0.3.\n"], ["tf.nn.lrn", "An optional float. Defaults to 1. A scale factor, usually positive.\n"], ["tf.keras.activations.relu", "A float that governs the slope for values lower than the threshold.\n"]], "features": [["tf.nn.elu", "A Tensor. Must be one of the following types: half, bfloat16, float32, float64.\n"], ["tf.nn.gelu", "A float Tensor representing preactivation values.\n"], ["tf.nn.relu", "A Tensor. Must be one of the following types: float32, float64, int32, uint8, int16, int8, int64, bfloat16, uint16, half, uint32, uint64, qint8.\n"], ["tf.nn.selu", "A Tensor. Must be one of the following types: half, bfloat16, float32, float64.\n"], ["tf.math.softplus", "Tensor\n"], ["tf.nn.softsign", "A Tensor. Must be one of the following types: half, bfloat16, float32, float64.\n"]], "indices": [["tf.gather", "The index Tensor. Must be one of the following types: int32, int64. The values must be in range [0, params.shape[axis]).\n"]], "params": [["tf.gather", "The Tensor from which to gather values. Must be at least rank axis + 1.\n"]], "validate_indices": [["tf.gather", "Deprecated, does nothing. Indices are always validated on CPU, never validated on GPU.\n"]], "approximate": [["tf.keras.activations.gelu", "A bool, whether to enable approximation.\n"], ["tf.nn.gelu", "An optional bool. Defaults to False. Whether to enable approximation.\n"]], "keepdims": [["tf.keras.layers.GlobalAveragePooling1D", "A boolean, whether to keep the temporal dimension or not. If keepdims is False (default), the rank of the tensor is reduced for spatial dimensions. If keepdims is True, the temporal dimension are retained with length 1. The behavior is the same as for tf.reduce_mean or np.mean.\n"], ["tf.keras.layers.GlobalAveragePooling2D", "A boolean, whether to keep the spatial dimensions or not. If keepdims is False (default), the rank of the tensor is reduced for spatial dimensions. If keepdims is True, the spatial dimensions are retained with length 1. The behavior is the same as for tf.reduce_mean or np.mean.\n"], ["tf.keras.layers.GlobalAveragePooling3D", "A boolean, whether to keep the spatial dimensions or not. If keepdims is False (default), the rank of the tensor is reduced for spatial dimensions. If keepdims is True, the spatial dimensions are retained with length 1. The behavior is the same as for tf.reduce_mean or np.mean.\n"], ["tf.keras.layers.GlobalMaxPooling1D", "A boolean, whether to keep the temporal dimension or not. If keepdims is False (default), the rank of the tensor is reduced for spatial dimensions. If keepdims is True, the temporal dimension are retained with length 1. The behavior is the same as for tf.reduce_max or np.max.\n"], ["tf.keras.layers.GlobalMaxPooling2D", "A boolean, whether to keep the spatial dimensions or not. If keepdims is False (default), the rank of the tensor is reduced for spatial dimensions. If keepdims is True, the spatial dimensions are retained with length 1. The behavior is the same as for tf.reduce_max or np.max.\n"], ["tf.keras.layers.GlobalMaxPooling3D", "A boolean, whether to keep the spatial dimensions or not. If keepdims is False (default), the rank of the tensor is reduced for spatial dimensions. If keepdims is True, the spatial dimensions are retained with length 1. The behavior is the same as for tf.reduce_max or np.max.\n"], ["tf.reduce_max", "If true, retains reduced dimensions with length 1.\n"], ["tf.reduce_mean", "If true, retains reduced dimensions with length 1.\n"], ["tf.reduce_min", "If true, retains reduced dimensions with length 1.\n"], ["tf.reduce_prod", "If true, retains reduced dimensions with length 1.\n"], ["tf.reduce_sum", "If true, retains reduced dimensions with length 1.\n"]], "count": [["tf.keras.layers.GRU", "Int, how many dropout mask will be generated. It is useful for cell that has internal weights fused together.\n"], ["tf.keras.layers.LSTM", "Int, how many dropout mask will be generated. It is useful for cell that has internal weights fused together.\n"]], "inputs": [["tf.keras.layers.GRU", "The input tensor whose shape will be used to generate dropout mask.\n"], ["tf.keras.layers.LSTM", "The input tensor whose shape will be used to generate dropout mask.\n"]], "training": [["tf.keras.layers.GRU", "Boolean tensor, whether its in training mode, dropout will be ignored in non-training mode.\n"], ["tf.keras.layers.LSTM", "Boolean tensor, whether its in training mode, dropout will be ignored in non-training mode.\n"]], "beta": [["tf.nn.lrn", "An optional float. Defaults to 0.5. An exponent.\n"]], "bias": [["tf.nn.lrn", "An optional float. Defaults to 1. An offset (usually positive to avoid dividing by 0).\n"]], "depth_radius": [["tf.nn.lrn", "An optional int. Defaults to 5. 0-D. Half-width of the 1-D normalization window.\n"]], "input": [["tf.nn.lrn", "A Tensor. Must be one of the following types: half, bfloat16, float32. 4-D.\n"], ["tf.shape", "A Tensor or SparseTensor.\n"]], "alpha_constraint": [["tf.keras.layers.PReLU", "Constraint for the weights.\n"]], "alpha_initializer": [["tf.keras.layers.PReLU", "Initializer function for the weights.\n"]], "alpha_regularizer": [["tf.keras.layers.PReLU", "Regularizer for the weights.\n"]], "shared_axes": [["tf.keras.layers.PReLU", "The axes along which to share learnable parameters for the activation function. For example, if the incoming feature maps are from a 2D convolution with output shape (batch, height, width, channels), and you wish to share parameters across space so that each filter only has one set of parameters, set shared_axes=[1, 2].\n"]], "input_tensor": [["tf.reduce_max", "The tensor to reduce. Should have real numeric type.\n"], ["tf.reduce_mean", "The tensor to reduce. Should have numeric type.\n"], ["tf.reduce_min", "The tensor to reduce. Should have real numeric type.\n"], ["tf.reduce_prod", "The tensor to reduce. Should have numeric type.\n"], ["tf.reduce_sum", "The tensor to reduce. Should have numeric type.\n"]], "max_value": [["tf.keras.activations.relu", "A float that sets the saturation threshold (the largest value the function will return).\n"], ["tf.keras.layers.ReLU", "Float >= 0. Maximum activation value. None means unlimited. Defaults to None.\n"]], "threshold": [["tf.keras.activations.relu", "A float giving the threshold value of the activation function below which values will be damped or set to zero.\n"], ["tf.keras.layers.ReLU", "Float >= 0. Threshold value for thresholded activation. Defaults to 0..\n"]], "negative_slope": [["tf.keras.layers.ReLU", "Float >= 0. Negative slope coefficient. Defaults to 0..\n"]], "target_shape": [["tf.keras.layers.Reshape", "Target shape. Tuple of integers, does not include the samples dimension (batch size).\n"]], "cell": [["tf.keras.layers.RNN", "A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has:\n"]], "out_type": [["tf.shape", "(Optional) The specified output type of the operation (int32 or int64). Defaults to tf.int32. (Note: there is an experimental flag, tf_shape_default_int64 that changes the default to tf.int64. This is an unsupported, experimental setting that causes known breakages.)\n"]], "logits": [["tf.nn.softmax", "A non-empty Tensor. Must be one of the following types: half, float32, float64.\n"]], "theta": [["tf.keras.layers.ThresholdedReLU", "Float >= 0. Threshold location of activation.\n"]]}